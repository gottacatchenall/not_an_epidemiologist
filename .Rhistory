library(tidyverse)
library(zoo)
library(ggthemr)
ggthemr('fresh', spacing=2 ,layout="scientific")
thm = theme(panel.border = element_rect(colour = "#222222", fill = NA, size=1), text=element_text(family="Helvetica Neue",size=14))
setwd("not_an_epidemiologist")
# =================================================
#
#   county level demographic data
#
# =============================================mv ====
append_leading_zeros = function(orig, n_digits=3){
num_zeros_to_add = n_digits - nchar(as.character(orig))
if (num_zeros_to_add > 0){
lead = paste(rep("0", num_zeros_to_add), collapse="", sep="")
new_string = paste(lead, as.character(orig), sep="", collapse="")
return(new_string)
}
else{
return(orig)
}
}
fipsify = function(state, county){
state_string = append_leading_zeros(state, n_digits=1)
county_string = append_leading_zeros(county, n_digits=3)
fips = paste(state_string, county_string, sep="")
return(fips)
}
county_demographics = read.csv('county_demographics.csv') %>% rowwise() %>% mutate(fips=fipsify(STATE,COUNTY)) %>% glimpse()
county_demographics$fips = (county_demographics$fips )
# =================================================
#
#   covid data via nyt
#
# =================================================
county_level_covid_data = read.csv('us-counties.csv')
county_level_covid_data$date = as.Date(county_level_covid_data$date)
county_level_covid_data$fips = as.character(county_level_covid_data$fips)
county_level_covid_data %>% filter(state=='Colorado')
colorado_full = county_level_covid_data %>% filter(state=='Colorado') %>% inner_join(county_demographics, by="fips")
install.packages('shiny')
library(shiny)
runExample("01_hello")
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
source('./src/shiny_app/ui.R')
source('./src/shiny_app/server.R')
shinyApp(ui = ui, server = server)
runApp('src/shiny_app')
runApp('src/main.R')
library(shiny)
setwd("~/not_an_epidemiologist")
source('./src/shiny_app/ui.R')
source('./src/shiny_app/server.R')
shinyApp(ui = ui, server = server)
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
str(faithful)
runApp('src/shiny_app')
sidebar = sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
))
runApp('src/shiny_app')
runApp('src/shiny_app')
sidebar = sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
)
main_panel = mainPanel(
plotOutput(outputId = "distPlot")
)
ui = fluidPage(
navbarPage("not_an_epidemiologist"),
sidebarLayout(
sidebar,
main_panel,
)
)
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp()
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp()
runApp('src/shiny_app')
runApp()
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
load_data
load_data()
load_data = function(data_dir_path="../../data", covid_dir_name="covid-19-data"){
county_level_demographics_path = paste(data_dir_path, "county_demographics.csv", sep="/")
county_level_covid_data_path = paste(data_dir_path, covid_dir_name, "/live/us-counties.csv", sep="/")
county_demographics = read.csv(county_level_demographics_path) %>% rowwise() %>% mutate(fips=fipsify(STATE,COUNTY))
county_level_covid_data = read.csv(county_level_covid_data_path)
county_level_covid_data$date = as.Date(county_level_covid_data$date)
county_level_covid_data$fips = as.character(county_level_covid_data$fips)
county_level_data = county_level_covid_data %>% inner_join(county_demographics, by="fips")
return(county_level_data)
}
load_data()
load_data(data_dir_path="./data")
append_leading_zeros = function(orig, n_digits=3){
num_zeros_to_add = n_digits - nchar(as.character(orig))
if (num_zeros_to_add > 0){
lead = paste(rep("0", num_zeros_to_add), collapse="", sep="")
new_string = paste(lead, as.character(orig), sep="", collapse="")
return(new_string)
}
else{
return(orig)
}
}
fipsify = function(state, county){
state_string = append_leading_zeros(state, n_digits=1)
county_string = append_leading_zeros(county, n_digits=3)
fips = paste(state_string, county_string, sep="")
return(fips)
}
load_data(data_dir_path="./data")
tmp_data = load_data(data_dir_path="./data")
tmp_data %>% filter(state=='Colorado')
tmp_data %>% filter(state=='Colorado') %>% group_by(fits)
tmp_data %>% filter(state=='Colorado') %>% group_by(fips)
tmp_data %>% filter(state=='Colorado') %>% group_by(date,fips)
tmp_data %>% filter(state=='Colorado') %>% group_byfips)
tmp_data %>% filter(state=='Colorado') %>% group_by(fips)
tmp_data %>% filter(state=='Colorado') %>% arrange_by(date)
tmp_data %>% filter(state=='Colorado') %>% arrange(date)
head(tmp_data)
tail(county_levels_data)
tail(county_level_data)
tail(tmp_data)
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp()
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp()
runApp('src/shiny_app')
runApp()
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp('src/shiny_app')
runApp()
runApp('src/shiny_app')
county_level_data = county_level_data %>% filter(state=="Colorado") %>%
group_by(fips) %>%
arrange(date) %>%
mutate(number_new_cases = cases - lag(cases)) %>%
ungroup() %>%
group_by(fips) %>%
mutate(new_cases_per_capita=number_new_cases/POPESTIMATE2019) %>%
mutate(new_cases_moving_average=c(0,0,0,0,rollsum(new_cases_per_capita,5)))
runApp('src/shiny_app')
runApp('src/shiny_app')
rsconnect::setAccountInfo(name='gottacatchenall',
token='F5ACF067EBF749D5EFD7A9F0B181B58F',
secret='ZaNQqIRDP4q7svQNCIflik/d2qf+QRkh/dm9gjZ2')
runApp('src/shiny_app')
